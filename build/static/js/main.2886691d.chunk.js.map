{"version":3,"sources":["components/Comment.js","components/CommentList.js","components/Form.js","hooks/useInputState.js","components/CommentApp.js","hooks/useCommentState.js","App.js","serviceWorker.js","index.js"],"names":["Comment","text","playComment","isLoading","id","ListItem","style","minHeight","ListItemText","width","display","Button","marginLeft","variant","color","size","endIcon","CircularProgress","aria-label","onClick","ComentList","comments","fetchComments","length","Paper","List","map","comment","i","key","Divider","Form","addComment","initialVal","useState","value","setValue","e","target","useInputState","handleChange","reset","margin","padding","TextField","multiline","rows","onChange","label","fullWidth","require","marginBottom","CommentApp","setComments","setIsLoading","API","axios","create","baseURL","a","get","then","res","data","newText","post","method","url","responseType","response","blob","Blob","type","window","URL","createObjectURL","audio","Audio","src","play","catch","error","console","log","useCommentState","height","backgroundColor","elevation","AppBar","position","Toolbar","Typography","Grid","container","justify","marginTop","spacing","item","xs","sm","md","lg","App","className","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"wRAUe,SAASA,EAAT,GAAwD,IAArCC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,UAAWC,EAAM,EAANA,GAC9D,OACE,8BACE,eAACC,EAAA,EAAD,CAAUC,MAAO,CAAEC,UAAW,QAA9B,UAEE,cAACC,EAAA,EAAD,CAAcF,MAAO,CAAEG,MAAO,OAA9B,SAAwCR,IACxC,qBAAKK,MAAO,CAAEI,QAAS,gBAAvB,SAEGP,IAAcC,EACb,cAACO,EAAA,EAAD,CACEL,MAAO,CAAEM,WAAY,QACrBC,QAAQ,YACRC,MAAM,UACNC,KAAK,QACLC,QAAS,cAACC,EAAA,EAAD,CAAkBF,KAAM,GAAIG,aAAW,eALlD,mBAUA,cAACP,EAAA,EAAD,CACEQ,QAAS,kBAAMjB,EAAYD,EAAMG,IACjCE,MAAO,CAAEM,WAAY,QACrBC,QAAQ,YACRC,MAAM,UACNC,KAAK,QACLC,QAAS,cAAC,IAAD,CAAeE,aAAW,UANrC,0BClBG,SAASE,EAAT,GAKX,IAJFC,EAIC,EAJDA,SACAC,EAGC,EAHDA,cACApB,EAEC,EAFDA,YACAC,EACC,EADDA,UAOA,OAJKkB,EAASE,QACZD,IAIA,cAACE,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UAEGJ,EAASE,QAAU,EAClB,cAAClB,EAAA,EAAD,UAAU,cAACG,EAAA,EAAD,oDACM,QAAdL,EACF,cAACc,EAAA,EAAD,IAEAI,EAASK,KAAI,SAACC,EAASC,GAAV,OACX,gCAEE,wBAAC5B,EAAD,2BACM2B,GADN,IAEEE,IAAKF,EAAQvB,GACbF,YAAaA,EACbC,UAAWA,EACXC,GAAIuB,EAAQvB,MAGbwB,EAAIP,EAASE,OAAS,GACrB,cAACO,EAAA,EAAD,aAAiBH,EAAQvB,GAAzB,eAXJ,UAAauB,EAAQvB,GAArB,sB,qBCtBG,SAAS2B,EAAT,GAA+B,IAAfC,EAAc,EAAdA,WAE7B,ECTa,SAACC,GACd,MAA0BC,mBAASD,GAAnC,mBAAOE,EAAP,KAAcC,EAAd,KAOA,MAAO,CAACD,EANa,SAACE,GACpBD,EAASC,EAAEC,OAAOH,QAEN,WACZC,EAAS,MDG0BG,CAAc,IAAnD,mBAAOJ,EAAP,KAAcK,EAAd,KAA4BC,EAA5B,KAEA,OACE,cAACjB,EAAA,EAAD,CAAOlB,MAAO,CAAEoC,OAAQ,IAAKC,QAAS,iBAAtC,SACE,iCAEE,cAACC,EAAA,EAAD,CACExC,GAAG,4BACHyC,WAAS,EACTC,KAAM,EACNjC,QAAQ,WACRsB,MAAOA,EACPY,SAAUP,EACVE,OAAO,SACPM,MAAM,4BACNC,WAAS,EACTC,SAAO,IAGT,cAACvC,EAAA,EAAD,CACEE,QAAQ,YACRC,MAAM,UACNR,MAAO,CAAE6C,aAAc,QACvBhC,QAAS,SAACkB,GACRL,EAAWG,GACXM,KAEFQ,WAAS,EARX,0C,8CEuBOG,MAtCf,WACE,MCZa,WACb,MAAgClB,mBAAS,IAAzC,mBAAOb,EAAP,KAAiBgC,EAAjB,KACA,EAAkCnB,oBAAS,GAA3C,mBAAO/B,EAAP,KAAkBmD,EAAlB,KAGMC,EAAMC,IAAMC,OAAO,CACvBC,QAAQ,2BAGV,MAAO,CACLrC,WACAC,cAAc,WAAD,4BAAE,sBAAAqC,EAAA,sEACPJ,EAAIK,IAAI,YAAYC,MAAK,SAACC,GAAD,OAAST,EAAYS,EAAIC,SAD3C,2CAAF,kDAAC,GAGd/B,WAAY,SAACgC,GACXT,EAAIU,KAAJ,4BAA8BD,IAAWH,MAAK,SAACC,GAC7CT,EAAYS,EAAIC,UAGpB7D,YAAY,WAAD,4BAAE,WAAOD,EAAMG,GAAb,SAAAuD,EAAA,6DACXL,EAAalD,GADF,SAELoD,IAAM,CACVU,OAAQ,MACRC,IAAI,yCAAD,OAA2ClE,GAC9CmE,aAAc,SAEbP,MAAK,SAACQ,GACL,IAAIC,EAAO,IAAIC,KAAK,CAACF,EAASN,MAAO,CAAES,KAAM,eACzCL,EAAMM,OAAOC,IAAIC,gBAAgBL,GACrCG,OAAOG,MAAQ,IAAIC,MACnBJ,OAAOG,MAAME,IAAMX,EACnBM,OAAOG,MAAMG,UAEdC,OAAM,SAACC,GACNC,QAAQC,IAAIF,MAfL,OAiBX3B,GAAa,GAjBF,2CAAF,qDAAC,GAmBZnD,aD1BsEiF,GAAhE/D,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,cAAeU,EAAjC,EAAiCA,WAAY9B,EAA7C,EAA6CA,YAAaC,EAA1D,EAA0DA,UAE1D,OACE,eAACqB,EAAA,EAAD,CACElB,MAAO,CACLqC,QAAS,EACTD,OAAQ,EACR2C,OAAQ,QACRC,gBAAiB,WAEnBC,UAAW,EAPb,UAUE,cAACC,EAAA,EAAD,CAAQ1E,MAAM,UAAU2E,SAAS,SAASnF,MAAO,CAAE+E,OAAQ,QAA3D,SACE,cAACK,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAY7E,MAAM,UAAlB,uDAIJ,eAAC8E,EAAA,EAAD,CACEC,WAAS,EACTC,QAAQ,SACRxF,MAAO,CAAEyF,UAAW,QACpBC,QAAS,EAJX,UAOE,cAACJ,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAtC,SACE,cAACtE,EAAD,CAAMC,WAAYA,MAGpB,cAAC4D,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAtC,SACE,cAAC,EAAD,CAAahF,SAAUA,EAAUC,cAAeA,EAAepB,YAAaA,EAAaC,UAAWA,aErC/FmG,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCMcC,QACW,cAA7B/B,OAAOgC,SAASC,UAEe,UAA7BjC,OAAOgC,SAASC,UAEhBjC,OAAOgC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtD,MAAK,SAAAuD,GACJA,EAAaC,gBAEdrC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMqC,c","file":"static/js/main.2886691d.chunk.js","sourcesContent":["import React from \"react\";\n\n//dependencias do Material UI\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\nimport Button from \"@material-ui/core/Button\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\n\nexport default function Comment({ text, playComment, isLoading, id }) {\n  return (\n    <div>\n      <ListItem style={{ minHeight: \"64px\" }}>\n        {/* Texto do comentário */}\n        <ListItemText style={{ width: \"80%\" }}>{text}</ListItemText>\n        <div style={{ display: \"inline-block\" }}>\n          {/* Botao Ouvir */}\n          {isLoading === id ? (\n            <Button\n              style={{ marginLeft: \"1rem\" }}\n              variant=\"contained\"\n              color=\"default\"\n              size=\"small\"\n              endIcon={<CircularProgress size={18} aria-label=\"carregando\" />}\n            >\n              Ouvir \n            </Button>\n          ) : (\n            <Button\n              onClick={() => playComment(text, id)}\n              style={{ marginLeft: \"1rem\" }}\n              variant=\"contained\"\n              color=\"default\"\n              size=\"small\"\n              endIcon={<PlayArrowIcon aria-label=\"ouvir\" />}\n            >\n              Ouvir\n            </Button>\n          )}\n        </div>\n      </ListItem>\n    </div>\n  );\n}\n","import React from \"react\";\n\n//Dependencias do Material UI\nimport Paper from \"@material-ui/core/Paper\";\nimport List from \"@material-ui/core/List\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Comment from \"../components/Comment\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\n\nexport default function ComentList({\n  comments,\n  fetchComments,\n  playComment,\n  isLoading,\n}) {\n  // Pegar todos os cometários\n  if (!comments.length) {\n    fetchComments();\n  }\n\n  return (\n    <Paper>\n      <List>\n      \n        {comments.length <= 0 ? (\n          <ListItem><ListItemText>Nenhum comentário a ser exibido.</ListItemText></ListItem>\n        ) : isLoading === \"all\" ? (\n          <CircularProgress />\n        ) : (\n          comments.map((comment, i) => (\n            <div key={`${comment.id}-container`}>\n              {/* // Comentario */}\n              <Comment\n                {...comment}\n                key={comment.id}\n                playComment={playComment}\n                isLoading={isLoading}\n                id={comment.id}\n              />\n              {/* Barra de divisão */}\n              {i < comments.length - 1 && (\n                <Divider key={`${comment.id}-divider`} />\n              )}\n            </div>\n          ))\n        )}\n      </List>\n    </Paper>\n  );\n}\n","import React from \"react\";\n\n//Material UI \nimport TextField from \"@material-ui/core/TextField\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Button from \"@material-ui/core/Button\";\n\n//Hooks\nimport useInputState from \"../hooks/useInputState\";\n\nexport default function Form({ addComment }) {\n  // Hoooks para o formulario\n  const [value, handleChange, reset] = useInputState(\"\");\n  \n  return (\n    <Paper style={{ margin: \"0\", padding: \"0 1rem 0 1rem\" }}>\n      <form>\n        {/* Input de texto do comentário */}\n        <TextField\n          id=\"outlined-multiline-static\"\n          multiline\n          rows={6}\n          variant=\"outlined\"\n          value={value}\n          onChange={handleChange}\n          margin=\"normal\"\n          label=\"Escreva seu comentário\"\n          fullWidth\n          require\n        />\n        {/* Botão para ouvir */}\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          style={{ marginBottom: \"1rem\" }}\n          onClick={(e) => {\n            addComment(value);\n            reset();\n          }}\n          fullWidth\n        >\n          Adicionar Comentário\n        </Button>\n      </form>\n    </Paper>\n  );\n}\n","import { useState } from \"react\";\n\n//Boilerplate do React para formularios\nexport default (initialVal) => {\n  const [value, setValue] = useState(initialVal);\n  const handleChange = (e) => {\n    setValue(e.target.value);\n  };\n  const reset = () => {\n    setValue(\"\");\n  };\n  return [value, handleChange, reset];\n};\n","import React from \"react\";\n\n//dependencias do Material UI\nimport Typography from \"@material-ui/core/Typography\";\nimport Paper from \"@material-ui/core/Paper\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Grid from \"@material-ui/core/Grid\";\n\n//Componentes proprios\nimport CommentList from \"./CommentList\";\nimport Form from \"./Form\";\n\n//Hooks\nimport useCommentState from \"../hooks/useCommentState\";\n\nfunction CommentApp() {\n  const { comments, fetchComments, addComment, playComment, isLoading } = useCommentState();\n\n  return (\n    <Paper\n      style={{\n        padding: 0,\n        margin: 0,\n        height: \"100vh\",\n        backgroundColor: \"#fafafa\",\n      }}\n      elevation={0}\n    >\n      {/* Barra superior */}\n      <AppBar color=\"primary\" position=\"static\" style={{ height: \"64px\" }}>\n        <Toolbar>\n          <Typography color=\"inherit\">Comentários com IBM Watson Service</Typography>\n        </Toolbar>\n      </AppBar>\n      {/* Grid com o conteudo responsivo */}\n      <Grid\n        container\n        justify=\"center\"\n        style={{ marginTop: \"1rem\" }}\n        spacing={2}\n      >\n        {/* Formulario */}\n        <Grid item xs={11} sm={10} md={5} lg={4}>\n          <Form addComment={addComment} />\n        </Grid>\n        {/* Lista de comentarios */}\n        <Grid item xs={11} sm={10} md={5} lg={4}>\n          <CommentList comments={comments} fetchComments={fetchComments} playComment={playComment} isLoading={isLoading} />\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n}\nexport default CommentApp;\n","import { useState } from \"react\";\nimport axios from \"axios\";\n\n// Hooks para manejar os comentários e comunicar com a APi\n// retorna um objeto {comments, fetchComments, addComment, playComment}\nexport default () => {\n  const [comments, setComments] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  //Setup da API\n  const API = axios.create({\n    baseURL: `http://localhost:4000/`,\n  });\n\n  return {\n    comments,\n    fetchComments: async () => {\n      await API.get(\"comments\").then((res) => setComments(res.data));\n    },\n    addComment: (newText) => {\n      API.post(`comments/add?text=${newText}`).then((res) => {\n        setComments(res.data);\n      });\n    },\n    playComment: async (text, id) => {\n      setIsLoading(id);\n      await axios({\n        method: \"get\",\n        url: `http://localhost:4000/synthesize?text=${text}`,\n        responseType: \"blob\",\n      })\n        .then((response) => {\n          var blob = new Blob([response.data], { type: \"audio/webm\" });\n          var url = window.URL.createObjectURL(blob);\n          window.audio = new Audio();\n          window.audio.src = url;\n          window.audio.play();\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n      setIsLoading(false);\n    },\n    isLoading,\n  };\n};\n","import React from \"react\";\nimport CommentApp from \"./components/CommentApp\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CommentApp />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}